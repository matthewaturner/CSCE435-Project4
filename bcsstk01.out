
Currently Loaded Modules:
  1) CUDA/8.0.44   2) GCC/5.2.0



./tri_main bcsstk01
-------------------------------------------------------------

file: bcsstk01

Dumping the whole graph:
# nodes: 48, # edges: 352
node: 0: 7 edges, adjacency list:
 4 5 6 10 18 24 29
node: 1: 7 edges, adjacency list:
 3 5 7 9 19 23 25
node: 2: 7 edges, adjacency list:
 3 4 8 20 22 26 27
node: 3: 7 edges, adjacency list:
 1 2 7 9 21 26 27
node: 4: 7 edges, adjacency list:
 0 2 6 10 20 22 28
node: 5: 7 edges, adjacency list:
 0 1 11 19 23 24 29
node: 6: 7 edges, adjacency list:
 0 4 10 11 12 30 35
node: 7: 7 edges, adjacency list:
 1 3 9 11 13 17 31
node: 8: 7 edges, adjacency list:
 2 9 10 14 16 32 33
node: 9: 7 edges, adjacency list:
 1 3 7 8 15 32 33
node: 10: 7 edges, adjacency list:
 0 4 6 8 14 16 34
node: 11: 7 edges, adjacency list:
 5 6 7 13 17 30 35
node: 12: 10 edges, adjacency list:
 6 16 17 18 22 36 41 42 46 47
node: 13: 11 edges, adjacency list:
 7 11 14 15 17 19 21 37 43 44 45
node: 14: 11 edges, adjacency list:
 8 10 13 15 16 20 38 39 43 44 45
node: 15: 10 edges, adjacency list:
 9 13 14 19 21 38 39 43 44 45
node: 16: 11 edges, adjacency list:
 8 10 12 14 17 18 22 40 42 46 47
node: 17: 11 edges, adjacency list:
 7 11 12 13 16 23 36 41 42 46 47
node: 18: 7 edges, adjacency list:
 0 12 16 22 23 42 47
node: 19: 7 edges, adjacency list:
 1 5 13 15 21 23 43
node: 20: 7 edges, adjacency list:
 2 4 14 21 22 44 45
node: 21: 7 edges, adjacency list:
 3 13 15 19 20 44 45
node: 22: 7 edges, adjacency list:
 2 4 12 16 18 20 46
node: 23: 7 edges, adjacency list:
 1 5 17 18 19 42 47
node: 24: 6 edges, adjacency list:
 0 5 28 29 30 34
node: 25: 4 edges, adjacency list:
 1 27 31 33
node: 26: 4 edges, adjacency list:
 2 3 27 32
node: 27: 6 edges, adjacency list:
 2 3 25 26 31 33
node: 28: 4 edges, adjacency list:
 4 24 30 34
node: 29: 4 edges, adjacency list:
 0 5 24 35
node: 30: 7 edges, adjacency list:
 6 11 24 28 34 35 36
node: 31: 7 edges, adjacency list:
 7 25 27 33 35 37 41
node: 32: 7 edges, adjacency list:
 8 9 26 33 34 38 40
node: 33: 7 edges, adjacency list:
 8 9 25 27 31 32 39
node: 34: 7 edges, adjacency list:
 10 24 28 30 32 38 40
node: 35: 7 edges, adjacency list:
 6 11 29 30 31 37 41
node: 36: 7 edges, adjacency list:
 12 17 30 40 41 42 46
node: 37: 7 edges, adjacency list:
 13 31 35 39 41 43 45
node: 38: 7 edges, adjacency list:
 14 15 32 34 39 40 44
node: 39: 7 edges, adjacency list:
 14 15 33 37 38 43 45
node: 40: 7 edges, adjacency list:
 16 32 34 36 38 42 46
node: 41: 7 edges, adjacency list:
 12 17 31 35 36 37 47
node: 42: 9 edges, adjacency list:
 12 16 17 18 23 36 40 46 47
node: 43: 8 edges, adjacency list:
 13 14 15 19 37 39 44 45
node: 44: 8 edges, adjacency list:
 13 14 15 20 21 38 43 45
node: 45: 9 edges, adjacency list:
 13 14 15 20 21 37 39 43 44
node: 46: 8 edges, adjacency list:
 12 16 17 22 36 40 42 47
node: 47: 8 edges, adjacency list:
 12 16 17 18 23 41 42 46
n         48 edges          176 read time:     0.0018 sec
GPU warmup 0.217455 sec
prep time 3.43402e-06

Dumping the whole prepped matrix S=tril(A):
# nodes: 48, # edges: 176
node: 0: 7 edges, adjacency list:
 4 5 6 10 18 24 29
node: 1: 7 edges, adjacency list:
 3 5 7 9 19 23 25
node: 2: 7 edges, adjacency list:
 3 4 8 20 22 26 27
node: 3: 5 edges, adjacency list:
 7 9 21 26 27
node: 4: 5 edges, adjacency list:
 6 10 20 22 28
node: 5: 5 edges, adjacency list:
 11 19 23 24 29
node: 6: 5 edges, adjacency list:
 10 11 12 30 35
node: 7: 5 edges, adjacency list:
 9 11 13 17 31
node: 8: 6 edges, adjacency list:
 9 10 14 16 32 33
node: 9: 3 edges, adjacency list:
 15 32 33
node: 10: 3 edges, adjacency list:
 14 16 34
node: 11: 4 edges, adjacency list:
 13 17 30 35
node: 12: 9 edges, adjacency list:
 16 17 18 22 36 41 42 46 47
node: 13: 9 edges, adjacency list:
 14 15 17 19 21 37 43 44 45
node: 14: 8 edges, adjacency list:
 15 16 20 38 39 43 44 45
node: 15: 7 edges, adjacency list:
 19 21 38 39 43 44 45
node: 16: 7 edges, adjacency list:
 17 18 22 40 42 46 47
node: 17: 6 edges, adjacency list:
 23 36 41 42 46 47
node: 18: 4 edges, adjacency list:
 22 23 42 47
node: 19: 3 edges, adjacency list:
 21 23 43
node: 20: 4 edges, adjacency list:
 21 22 44 45
node: 21: 2 edges, adjacency list:
 44 45
node: 22: 1 edges, adjacency list:
 46
node: 23: 2 edges, adjacency list:
 42 47
node: 24: 4 edges, adjacency list:
 28 29 30 34
node: 25: 3 edges, adjacency list:
 27 31 33
node: 26: 2 edges, adjacency list:
 27 32
node: 27: 2 edges, adjacency list:
 31 33
node: 28: 2 edges, adjacency list:
 30 34
node: 29: 1 edges, adjacency list:
 35
node: 30: 3 edges, adjacency list:
 34 35 36
node: 31: 4 edges, adjacency list:
 33 35 37 41
node: 32: 4 edges, adjacency list:
 33 34 38 40
node: 33: 1 edges, adjacency list:
 39
node: 34: 2 edges, adjacency list:
 38 40
node: 35: 2 edges, adjacency list:
 37 41
node: 36: 4 edges, adjacency list:
 40 41 42 46
node: 37: 4 edges, adjacency list:
 39 41 43 45
node: 38: 3 edges, adjacency list:
 39 40 44
node: 39: 2 edges, adjacency list:
 43 45
node: 40: 2 edges, adjacency list:
 42 46
node: 41: 1 edges, adjacency list:
 47
node: 42: 2 edges, adjacency list:
 46 47
node: 43: 2 edges, adjacency list:
 44 45
node: 44: 1 edges, adjacency list:
 45
node: 45: 0 edges, adjacency list:

node: 46: 1 edges, adjacency list:
 47
node: 47: 0 edges, adjacency list:

prep 0: host time     0.000012 sec rate    15.3016
ntriangles 160
prep 0: GPU  time     0.000505 sec rate     0.3488
ntriangles 160
prep time 3.37791e-06
prep 1: host time     0.000008 sec rate    22.1526
ntriangles 160
prep 1: GPU  time     0.000429 sec rate     0.4104
ntriangles 160
prep time 6.23893e-06
prep 2: host time     0.000008 sec rate    21.7448
ntriangles 160
prep 2: GPU  time     0.000419 sec rate     0.4201
ntriangles 160
prep time 5.79399e-06
prep 3: host time     0.000008 sec rate    22.4373
ntriangles 160
prep 3: GPU  time     0.000419 sec rate     0.4196
ntriangles 160
RESULTS: # triangles 160

prep: 0  time:     0.000003 sec
prep: 1  time:     0.000003 sec
prep: 2  time:     0.000006 sec
prep: 3  time:     0.000006 sec

performance with all prep included

method: tri_simple
prep:0 time:    0.000 rate:   11.78 #triangles: 160
prep:1 time:    0.000 rate:   15.54 #triangles: 160
prep:2 time:    0.000 rate:   12.28 #triangles: 160
prep:3 time:    0.000 rate:   12.91 #triangles: 160


method: tri_gpu
prep:0 time:    0.001 rate:    0.35 #triangles: 160
prep:1 time:    0.000 rate:    0.41 #triangles: 160
prep:2 time:    0.000 rate:    0.41 #triangles: 160
prep:3 time:    0.000 rate:    0.41 #triangles: 160


n:         48 edges        176 ntri          160
best method: tri_simple  prep: 1 rate    15.54

performance with all prep excluded

method: tri_simple
prep:0 time:    0.000 rate:   15.30 #triangles: 160
prep:1 time:    0.000 rate:   22.15 #triangles: 160
prep:2 time:    0.000 rate:   21.74 #triangles: 160
prep:3 time:    0.000 rate:   22.44 #triangles: 160


method: tri_gpu
prep:0 time:    0.001 rate:    0.35 #triangles: 160
prep:1 time:    0.000 rate:    0.41 #triangles: 160
prep:2 time:    0.000 rate:    0.42 #triangles: 160
prep:3 time:    0.000 rate:    0.42 #triangles: 160


n:         48 edges        176 ntri          160
best method: tri_simple  prep: 3 rate    22.44 (just tri)
./tri_main tiny
-------------------------------------------------------------

file: tiny

Dumping the whole graph:
# nodes: 5, # edges: 12
node: 0: 1 edges, adjacency list:
 4
node: 1: 2 edges, adjacency list:
 3 4
node: 2: 2 edges, adjacency list:
 3 4
node: 3: 3 edges, adjacency list:
 1 2 4
node: 4: 4 edges, adjacency list:
 0 1 2 3
n          5 edges            6 read time:     0.0019 sec
GPU warmup 0.204064 sec
prep time 6.57979e-07

Dumping the whole prepped matrix S=tril(A):
# nodes: 5, # edges: 6
node: 0: 1 edges, adjacency list:
 4
node: 1: 2 edges, adjacency list:
 3 4
node: 2: 2 edges, adjacency list:
 3 4
node: 3: 1 edges, adjacency list:
 4
node: 4: 0 edges, adjacency list:

prep 0: host time     0.000004 sec rate     1.6408
ntriangles 2
prep 0: GPU  time     0.000139 sec rate     0.0433
ntriangles 2
prep time 4.21889e-07
prep 1: host time     0.000001 sec rate     9.2167
ntriangles 2
prep 1: GPU  time     0.000097 sec rate     0.0618
ntriangles 2
prep time 8.61008e-07
prep 2: host time     0.000001 sec rate    11.4736
ntriangles 2
prep 2: GPU  time     0.000093 sec rate     0.0648
ntriangles 2
prep time 8.61008e-07
prep 3: host time     0.000000 sec rate    14.3484
ntriangles 2
prep 3: GPU  time     0.000091 sec rate     0.0662
ntriangles 2
RESULTS: # triangles 2

prep: 0  time:     0.000001 sec
prep: 1  time:     0.000000 sec
prep: 2  time:     0.000001 sec
prep: 3  time:     0.000001 sec

performance with all prep included

method: tri_simple
prep:0 time:    0.000 rate:    1.39 #triangles: 2
prep:1 time:    0.000 rate:    5.59 #triangles: 2
prep:2 time:    0.000 rate:    4.34 #triangles: 2
prep:3 time:    0.000 rate:    4.69 #triangles: 2


method: tri_gpu
prep:0 time:    0.000 rate:    0.04 #triangles: 2
prep:1 time:    0.000 rate:    0.06 #triangles: 2
prep:2 time:    0.000 rate:    0.06 #triangles: 2
prep:3 time:    0.000 rate:    0.07 #triangles: 2


n:          5 edges          6 ntri            2
best method: tri_simple  prep: 1 rate     5.59

performance with all prep excluded

method: tri_simple
prep:0 time:    0.000 rate:    1.64 #triangles: 2
prep:1 time:    0.000 rate:    9.22 #triangles: 2
prep:2 time:    0.000 rate:   11.47 #triangles: 2
prep:3 time:    0.000 rate:   14.35 #triangles: 2


method: tri_gpu
prep:0 time:    0.000 rate:    0.04 #triangles: 2
prep:1 time:    0.000 rate:    0.06 #triangles: 2
prep:2 time:    0.000 rate:    0.06 #triangles: 2
prep:3 time:    0.000 rate:    0.07 #triangles: 2


n:          5 edges          6 ntri            2
best method: tri_simple  prep: 3 rate    14.35 (just tri)

------------------------------------------------------------
Sender: LSF System <lsfadmin@gpu256-3016>
Subject: Job 6791015: <tri> in cluster <Main_Compute> Done

Job <tri> was submitted from host <login8> by user <davis> in cluster <Main_Compute>.
Job was executed on host(s) <gpu256-3016>, in queue <sn_short>, as user <davis> in cluster <Main_Compute>.
</home/davis> was used as the home directory.
</home/davis/trigpu> was used as the working directory.
Started at Thu Nov 23 07:43:00 2017
Results reported on Thu Nov 23 07:43:11 2017

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input
#BSUB -J tri                # job name 'tri'
#BSUB -L /bin/bash          # use bash
#BSUB -W 5                  # wall clock limit 5 minutes
#BSUB -n 1                  # Request 1 core
#BSUB -R "span[ptile=1]"    # Request 1 core per node.
#BSUB -R "rusage[mem=8000]" # Request 8000MB per process (CPU) for the job
#BSUB -M 8000               # Set the per process memory limit to 8000MB.
#BSUB -o bcsstk01.out       # Send stdout and stderr to "bcsstk01.out"
#BSUB -R "select[gpu]"      # Request a node with a GPU

module purge
module load CUDA/8.0.44
module load GCC/5.2.0
module list
# just run tiny and bcsstk01 matrices
make

------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   3.48 sec.
    Max Memory :                                 22 MB
    Average Memory :                             9.00 MB
    Total Requested Memory :                     8000.00 MB
    Delta Memory :                               7978.00 MB
    Max Swap :                                   1 MB
    Max Processes :                              4
    Max Threads :                                5

The output (if any) is above this job summary.

